<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Un blog de plus]]></title>
  <link href="http://frntn.github.com/atom.xml" rel="self"/>
  <link href="http://frntn.github.com/"/>
  <updated>2012-07-27T10:27:18+02:00</updated>
  <id>http://frntn.github.com/</id>
  <author>
    <name><![CDATA[Matthieu Fronton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction à RabbitMQ]]></title>
    <link href="http://frntn.github.com/blog/2012/07/24/cas-dutilisation-de-rabbitmq/"/>
    <updated>2012-07-24T01:57:00+02:00</updated>
    <id>http://frntn.github.com/blog/2012/07/24/cas-dutilisation-de-rabbitmq</id>
    <content type="html"><![CDATA[<h2>Contexte</h2>

<p>Nous sommes sur un site type communautaire et un bouton &#8220;recommander&#8221;
permet d&#8217;envoyer à chacune de mes amis une recommandation sur un objet.</p>

<p>L&#8217;implémentation technique de cette fonctionnalité est :</p>

<ul>
<li>Récupérer l&#8217;id du user (moi)</li>
<li>Récupérer l&#8217;id de l&#8217;objet</li>
<li>Récupérer l&#8217;id de chacun de mes amis</li>
<li>Pour chaque id ami, insérer dans une table RECO : mon id, l&#8217;id de mon
ami et l&#8217;id de l&#8217;objet.</li>
<li>Envoyer la réponse HTTP</li>
</ul>


<p>Si j&#8217;ai 2500 amis, j&#8217;aurais donc à créer 2500 lignes dans la table&#8230;
Je ne peux donc pas faire ca de façon synchrone, sinon je ne saurais être
en mesure d&#8217;envoyer ma réponse HTTP avant le timeout standard de 30 secondes.</p>

<p>Nous allons donc déléguer cette tâche d&#8217;insertion en base à un composant
spécialisé de notre application. Nous n&#8217;attendrons aucun acquittement de sa
part et continuerons notre processus. Ainsi, même pour 2500 lignes à insérer,
nous serons en mesure de rendre la main (envoyer la réponse HTTP) quasi
instantanément.</p>

<p>Pour cette délégation, nous allons utiliser <strong>RabbitMQ</strong>&#8230;</p>

<h2>RabbitMQ ? Qu&#8217;est-ce que c&#8217;est ?</h2>

<p>RabbitMQ est un <strong>Message Broker</strong> <em>(MQ = Message Queue)</em>. Littéralement,
un <strong>Broker</strong> signifie un <strong>Courtier</strong>. Dans notre cas, ou plus
généralement dans l&#8217;informatique, la notion de <strong>Broker</strong> permet d&#8217;indiquer
un <strong>intermédiaire</strong>.</p>

<p><strong>RabbitMQ</strong> est donc un intermédiaire entre deux composants souhaitant
communiquer :</p>

<ul>
<li>Le Producer : qui émet un message</li>
<li>Le Consumer : qui reçoit un message</li>
</ul>


<p><strong>RabbitMQ</strong> peut donc être vu comme un facteur. Plus encore, RabbitMQ c&#8217;est
l&#8217;équivalent de <em>La Poste</em> (dans une version fiable ;p) avec les boîtes aux
lettres, les plateformes de distribution, les facteurs, etc&#8230;</p>

<p>Voyons ensemble comment nous pouvons exploiter cette excellente solution !!!</p>

<h4>Pour les prochains exemples de codes&#8230;</h4>

<p>Tous les exemples de codes ci-après, Producer et Consumer, supposent
qu&#8217;on ait en début de fichier :</p>

<pre><code>require_once(__DIR__ . '/lib/php-amqplib/amqp.inc');
$connection = new AMQPConnection('localhost', 5672, 'guest', 'guest');
$channel = $connection-&gt;channel();
</code></pre>

<p>Et en fin de fichier :</p>

<pre><code>$channel-&gt;close();
$connection-&gt;close();
</code></pre>

<h2>Pile FILO : 1/1/1</h2>

<p>Nous avons donc compris qu&#8217;il était possible à un composant d&#8217;envoyer un
message à un autre par l&#8217;intermédiaire de <strong>Rabbitmq</strong>.</p>

<p>Dans le cas de notre exemple, au clic sur le bouton &#8220;recommander&#8221;, nous
avons donc un nouveau workflow :</p>

<blockquote><ol>
<li>Récupérer l&#8217;id du user (moi)</li>
<li>Récupérer l&#8217;id de l&#8217;objet</li>
<li>Récupérer l&#8217;id de chacun de mes amis</li>
<li>Envoyer un message (un json par exemple) à <strong>RabbitMQ</strong></li>
<li>Envoyer la réponse HTTP</li>
</ol>
</blockquote>

<p>Le processus se contente d&#8217;envoyer un message à <strong>RabbitMQ</strong> : c&#8217;est
le <strong>Producer</strong>. La réponse HTTP nous est donc renvoyée très rapidement
et nous retrouvons donc la main sans impression de lenteur.</p>

<h3>Pendant ce temps, dans <strong>RabbitMQ</strong></h3>

<p>Le message est réceptionné dans une file d&#8217;attente (la <strong>queue</strong>) puis
envoyé au processus connecté en écoute sur cette <strong>queue</strong>. Ce processus
est appelé <strong>Consumer</strong> et il va suivre le workflow suivant :</p>

<blockquote><ol>
<li>Charger le message reçu</li>
<li>Boucler sur le tableau des id ami</li>
<li>Pour chaque id ami : insérer une ligne dans la table RECO [id ami,id
moi, id objet]</li>
</ol>
</blockquote>

<p>Ce <strong>Consumer</strong> peut prendre le temps qu&#8217;il veut pour traiter le
message. <strong>RabbitMQ</strong> s&#8217;occupe de stocker les nouveaux messages dans sa
queue qui est virtuellement de taille infinie !</p>

<p>A la fin du traitement, le <strong>Consumer</strong> informe <strong>RabbitMQ</strong> qu&#8217;il a
terminé. Le prochain message lui est donc envoyé (<em>cette section sera
revue plus en détails</em>).</p>

<h3>En synthèse</h3>

<p>Nous avons donc mis en place un systeme de recommandation asynchrone :
1 Producer (envoi un message dans) 1 queue (qui le passe à) 1 Consumer</p>

<h3>Exemple de code</h3>

<p>Le producer est écrit en PHP et exécuté via une requête HTTP i.e. dans
un contexte serveur Web (Apache, &#8230;).</p>

<p><strong>Procuder :</strong></p>

<pre><code>$channel-&gt;queue_declare('hello', false, false, false, false);
$msg = new AMQPMessage('Hello World!');
$channel-&gt;basic_publish($msg, '', 'hello');
</code></pre>

<p>Le consumer est écrit en PHP et exécuté en ligne de commande dans un
contexte CLI (Command Line Interface).</p>

<p><strong>Consumer :</strong></p>

<pre><code>$channel-&gt;queue_declare('hello', false, false, false, false);
$callback = function($msg) {
   echo " [x] Received ", $msg-&gt;body, "\n";
};
$channel-&gt;basic_consume('hello', '', false, true, false, false, $callback);
while(count($channel-&gt;callbacks)) {
   $channel-&gt;wait();
}
</code></pre>

<p>Notez 2 choses :</p>

<ul>
<li>le Producer ET le Consumer déclarent la queue (<em>très recommandé, on
verra plus tard pourquoi</em>)</li>
<li>il y a une boucle &#8220;while&#8221; permettant au Consumer de rester à l&#8217;écoute
des messages suivants. Sans cette boucle, le script s&#8217;arrêterait au
premier message traité.</li>
</ul>


<p><strong>Monitoring :</strong></p>

<p>Il est nécessaire de s&#8217;assurer qu&#8217;un Consumer soit toujours à l&#8217;écoute
d&#8217;une queue. Sans quoi, en cas de plantage ou de deconnexion d&#8217;un Consumer,
votre queue se remplirait indéfiniment jusqu&#8217;à ce que vous reconnectiez un
nouveau Consumer. Aussi, je vous conseille aussi de monitorer ce script (via ps)
ou le nombre de consumer connectés à la queue (via rabbitmqctl) avec un outil de
surveillance ad-hoc afin de pouvoir reconnecté un Consumer dès qu&#8217;une
alerte est levée par votre système de monitoring.</p>

<p>Dans le cadre d&#8217;un projet professionnel, nous avons décidé de ne pas
faire ce monitoring avec reconnexion manuelle d&#8217;un Consumer.
Nous avons opté pour l&#8217;utilisation de l&#8217;outil <strong>supervisord</strong> relançant
automatiquement le script en cas de terminaison. Une autre solution aurait pu
être (<em>non testé, à confirmer</em>) d&#8217;utiliser un script shell qui se relance
lui-meme en cas de terminaison à l&#8217;aide de la commande <strong>trap</strong>.</p>

<p><strong>Limitation :</strong></p>

<p>S&#8217;il y a plus de messages produits que de messages consommés, la file
d&#8217;attente va grandir progressivement. Ce qui n&#8217;est absolument pas un
problème pour <strong>RabbitMQ</strong> au contraire : cela nous permet de gérer
efficacement et sans modificaiton d&#8217;infrastructure les pics de charge.</p>

<p>Mais si ce cas est constant et qu&#8217;il ne sagissent pas d&#8217;un simple pics
de charge, la file d&#8217;attente va croitre indéfiniment ce qui posera un
problème à un moment donnée (limitation physique de stockage des
messages dans la file d&#8217;attente).</p>

<p>Dans ce cas, il faut simplement augmenter le nombre de <strong>Consumer</strong> connecté
à la queue. C&#8217;est ce que nous allons voir dans la section suivante.</p>

<h4>Dispatch : 1/1/N</h4>

<h5>Round-Robbin</h5>

<p>Tour à tour (indépendament de la charge)</p>

<h5>Prefetch</h5>

<p>Selon le plus disponible</p>

<h4>Broadcast : 1/N</h4>

<p>Un Producer envoi à N Consumers via N file d&#8217;attente (1 file par Consumer)
Le message est envoyé à tous les consumers</p>

<h4>Route : 1/N</h4>

<p>Un Producer envoi à N Consumers via N file d&#8217;attente (1 file par Consumer)
Le message est envoyé à tous les consumers abonnés à la route</p>

<h4>Routes fixes</h4>

<p>Le nom de la route est fixe</p>

<h4>Routes dynamiques</h4>

<p>Le nom de la route est pattern</p>

<h3>Analogie</h3>

<p>RabbitMQ est composé de 2 éléments fondamentaux :
- Exchange : C&#8217;est la plateforme de tri du courrier
- Queue : C&#8217;est l&#8217;espace de stockage avant envoi</p>

<p>Un message suit donc le flux <strong>P > E > Q > C</strong> suivant :
1. Envoi par le <em>Producer</em>
2. Tri par le <em>Exchange</em>
3. Stockage dans la <em>Queue</em>
4. Réception par le <em>Consumer</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Brower Exploit Against Ssl &amp; Tls (a.k.a. BEAST) expliqué]]></title>
    <link href="http://frntn.github.com/blog/2012/07/23/brower-exploit-against-ssl-and-tls-a-dot-k-a-beast-explained/"/>
    <updated>2012-07-23T01:16:00+02:00</updated>
    <id>http://frntn.github.com/blog/2012/07/23/brower-exploit-against-ssl-and-tls-a-dot-k-a-beast-explained</id>
    <content type="html"><![CDATA[<p>(Draft : L&#8217;objectif de ce post est de tester le déploiement octopress)</p>

<p><em>More to come&#8230;</em></p>

<h3>Quelle est le problème ?</h3>

<p>TODO</p>

<h3>Comprendre la faille !</h3>

<p>TODO</p>

<h3>Limiter les risques&#8230;</h3>

<p>TODO</p>
]]></content>
  </entry>
  
</feed>
